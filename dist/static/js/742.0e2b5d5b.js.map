{"version":3,"file":"static/js/742.0e2b5d5b.js","mappings":"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","sources":["webpack://react-blog/./src/api/user.js","webpack://react-blog/./src/pages/Login/index.jsx","webpack://react-blog/./src/api/login.js","webpack://react-blog/./src/pages/Login/index.module.scss?6799","webpack://react-blog/./src/store/actions/login.js","webpack://react-blog/./src/store/actions/user.js","webpack://react-blog/./src/utils/request.js","webpack://react-blog/./src/config/api.js"],"sourcesContent":["import request from '@/utils/request'\r\n\r\n// 获取用户信息\r\nexport const getUserInfo = () => {\r\n  return request({\r\n    method: 'get',\r\n    url: '/user/getUserInfo'\r\n  })\r\n}\r\n\r\n// 修改用户信息\r\nexport const updateUserInfo = data => {\r\n  return request({\r\n    method: 'post',\r\n    url: '/user/updateUserInfo',\r\n    data\r\n  })\r\n}\r\n","import React, { useState, useRef } from 'react'\n// import loginImg from '@/assets/images/loginBgImg.png'\nimport { Button, Form, Input, message } from 'antd'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nimport styles from './index.module.scss'\nimport { login, register } from '@/api/login'\nimport { getUserInfo } from '@/api/user'\nimport { saveToken } from '@/store/actions/login'\nimport { setToken } from '@/utils/storage'\nimport { saveUser } from '@/store/actions/user'\n\nexport default function Login() {\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const loginForm = useRef(null)\n  const regForm = useRef(null)\n  const [isLogin, setIsLogin] = useState(true)\n\n  const onLogin = async values => {\n    const res = await login(values)\n    if (res.code === 200) {\n      message.success('登录成功')\n      dispatch(saveToken(res.data))\n      setToken(res.data)\n      const user = await getUserInfo()\n      // const { nickname, username, isAdmin, avatar } = user.data.user\n      dispatch(saveUser(user.data.user))\n      if (history.location?.state?.from) {\n        history.go(-1)\n      } else {\n        history.push('/home')\n      }\n    } else {\n      message.error(res.message)\n    }\n  }\n\n  const handlerClearForm = () => {\n    if (isLogin) {\n      loginForm.current.setFieldsValue({\n        username: '',\n        password: ''\n      })\n    } else {\n      regForm.current.setFieldsValue({\n        nickname: '',\n        username: '',\n        password: ''\n      })\n    }\n    setIsLogin(!isLogin)\n  }\n\n  const onRegister = async values => {\n    const res = await register(values)\n    if (res.code === 200) {\n      message.success('注册成功')\n      handlerClearForm()\n    } else {\n      message.error(res.message)\n    }\n  }\n\n  let formBody\n  if (isLogin) {\n    formBody = (\n      <div className=\"form-body\">\n        <Form\n          ref={loginForm}\n          name=\"basic\"\n          labelCol={{\n            span: 7\n          }}\n          wrapperCol={{\n            span: 16\n          }}\n          initialValues={{\n            username: '',\n            password: ''\n          }}\n          autoComplete=\"off\"\n          onFinish={onLogin}\n        >\n          <Form.Item\n            label=\"用户名\"\n            name=\"username\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your username!'\n              }\n            ]}\n          >\n            <Input maxLength={16} autoComplete=\"true\" />\n          </Form.Item>\n\n          <Form.Item\n            label=\"密码\"\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input your password!'\n              }\n            ]}\n          >\n            <Input.Password maxLength={16} autoComplete=\"true\" />\n          </Form.Item>\n\n          <Form.Item\n            wrapperCol={{\n              offset: 8,\n              span: 16\n            }}\n          >\n            <Button className=\"btn-right-margin-8\" type=\"primary\" htmlType=\"submit\">\n              登录\n            </Button>\n            <Button htmlType=\"button\" onClick={() => handlerClearForm()}>\n              前往注册\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    )\n  } else {\n    formBody = (\n      <div className=\"form-body\">\n        <Form\n          ref={regForm}\n          name=\"basic\"\n          labelCol={{\n            span: 7\n          }}\n          wrapperCol={{\n            span: 16\n          }}\n          initialValues={{\n            nickname: '',\n            username: '',\n            password: ''\n          }}\n          autoComplete=\"off\"\n          onFinish={onRegister}\n        >\n          <Form.Item\n            label=\"昵称\"\n            name=\"nickname\"\n            rules={[\n              {\n                required: true,\n                message: '请输入用户昵称'\n              }\n            ]}\n          >\n            <Input maxLength={7} autoComplete=\"true\" />\n          </Form.Item>\n          <Form.Item\n            label=\"用户名\"\n            name=\"username\"\n            rules={[\n              {\n                required: true,\n                message: '请输入用户名'\n              }\n            ]}\n          >\n            <Input maxLength={16} autoComplete=\"true\" />\n          </Form.Item>\n\n          <Form.Item\n            label=\"密码\"\n            name=\"password\"\n            rules={[\n              {\n                required: true,\n                message: '请输入用户密码'\n              }\n            ]}\n          >\n            <Input.Password maxLength={16} autoComplete=\"true\" />\n          </Form.Item>\n\n          <Form.Item\n            wrapperCol={{\n              offset: 8,\n              span: 16\n            }}\n          >\n            <Button className=\"btn-right-margin-8\" type=\"primary\" htmlType=\"submit\">\n              注册\n            </Button>\n            <Button htmlType=\"button\" onClick={() => handlerClearForm()}>\n              前往登录\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    )\n  }\n\n  return (\n    <div className={styles.root}>\n      <img\n        className=\"login-bg-img\"\n        src=\"https://kljfy-blog.oss-cn-hangzhou.aliyuncs.com/kljfy-blog-login-backgroundImg/loginBgImg.png\"\n        alt=\"bgImg\"\n      />\n      <div className=\"form-border\">\n        <p className=\"form-title\">登录</p>\n        {/* 登录或注册框 */}\n        {formBody}\n      </div>\n    </div>\n  )\n}\n","import request from '@/utils/request'\n\nexport const login = data => {\n  return request({\n    method: 'post',\n    url: '/login/user',\n    data\n  })\n}\n\nexport const register = data => {\n  return request({\n    method: 'post',\n    url: '/login/register/user',\n    data\n  })\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"St4cjt1fiOP8l3kmNd9o\"};","export const saveToken = (data) => {\n  return {\n    type: 'login/token',\n    data\n  }\n}\n\nexport const removeToken = () => {\n  return {\n    type: 'login/logout',\n  }\n}\n\n/**\n * 登录功能\n */\n// export const login = data => {\n//   return async dispatch => {\n//     const res = await request({\n//       method: 'post',\n//       url: '/login/user',\n//       data\n//     })\n//     dispatch(saveToken(res.data))\n//     setToken(res.data)\n//   }\n// }\n","export const saveUser = data => {\r\n  return {\r\n    type: 'user/save',\r\n    data\r\n  }\r\n}\r\n\r\nexport const removeUser = () => {\r\n  return {\r\n    type: 'user/remove'\r\n  }\r\n}\r\n\r\nexport const updateUser = data => {\r\n  return {\r\n    type: 'user/update',\r\n    data\r\n  }\r\n}\r\n","import axios from 'axios'\nimport { getToken } from './storage'\nimport baseURL from '@/config/api'\n\nconst http = axios.create({\n  baseURL,\n  timeout: 50000\n})\n\nhttp.interceptors.request.use(config => {\n  const { token } = getToken()\n  config.headers.Authorization = token\n  return config\n})\n\nhttp.interceptors.response.use(\n  response => {\n    return response.data\n  },\n  err => {\n    if (!err.response) {\n      console.log('网络繁忙，请稍后重试')\n      // return Promise.reject(err);\n    }\n    return Promise.reject(err)\n  }\n)\n\nexport default http\n","const env = process.env.NODE_ENV\r\n\r\nconst config = {\r\n  development: {\r\n    baseURL: '/api'\r\n  },\r\n  production: {\r\n    baseURL: '/api'\r\n  }\r\n}\r\n\r\nexport default config[env].baseURL\r\n"],"names":["getUserInfo","request","method","url","updateUserInfo","data","Login","formBody","dispatch","useDispatch","history","useHistory","loginForm","useRef","regForm","useState","isLogin","setIsLogin","onLogin","values","res","code","message","saveToken","setToken","user","saveUser","location","state","from","go","push","handlerClearForm","current","setFieldsValue","username","password","nickname","onRegister","className","ref","name","labelCol","span","wrapperCol","initialValues","autoComplete","onFinish","label","rules","required","maxLength","offset","type","htmlType","onClick","src","alt","removeToken","removeUser","updateUser","http","axios","baseURL","timeout","interceptors","use","config","token","getToken","headers","Authorization","response","err","console","log","Promise","reject"],"sourceRoot":""}